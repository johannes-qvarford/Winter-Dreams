#ifndef INCLUDED_STATE
#define INCLUDED_STATE
#include "InputManager.h"

////////////////////////////////////////////////////////////
// /State represent a state that the game can be in. 
// /It can be updated by a higher order class.
////////////////////////////////////////////////////////////
class State {
public:

	////////////////////////////////////////////////////////////
	// /Virtual destructor.
	////////////////////////////////////////////////////////////
	virtual ~State(){};

	////////////////////////////////////////////////////////////
	// /Update the state.
	////////////////////////////////////////////////////////////
	virtual void update() = 0;

	////////////////////////////////////////////////////////////
	// /Render the current frame.
	////////////////////////////////////////////////////////////
	virtual void render() = 0;

	////////////////////////////////////////////////////////////
	// /Called when a state is freezed.
	////////////////////////////////////////////////////////////
	virtual void onFreeze(){ InputManager::get().lockInput(); }

	////////////////////////////////////////////////////////////
	// /Called when a state is done being freezed.
	////////////////////////////////////////////////////////////
	virtual void onEndFreeze(){ InputManager::get().unlockInput(); }

	////////////////////////////////////////////////////////////
	// /Called when a state is unfreezed.
	////////////////////////////////////////////////////////////
	virtual void onUnfreeze(){ InputManager::get().lockInput(); }

	////////////////////////////////////////////////////////////
	// /Called when a state is done being unfreezed.
	////////////////////////////////////////////////////////////
	virtual void onEndUnfreeze(){ InputManager::get().unlockInput(); }
};

#endif