#ifndef INCLUDED_PARTICLE
#define INCLUDED_PARTICLE

#include <SFML\System\Vector2.hpp>
#include <string>
#include <memory>
#include <SFML\Graphics\Texture.hpp>
#include <SFML/Graphics/Sprite.hpp>

class Particle{
public:
	//////////////////////////////////////////////////////////////////////////
	// /Constructor for the Particle.
	//////////////////////////////////////////////////////////////////////////
	Particle(sf::Vector2f position, sf::Vector2f speed, int lifetime, std::string filePath);
	//////////////////////////////////////////////////////////////////////////
	// /Triangle wins
	//////////////////////////////////////////////////////////////////////////
	//~Particle();
	//////////////////////////////////////////////////////////////////////////
	// /Does all the automatic update crap like moving about and wiggling
	//////////////////////////////////////////////////////////////////////////
	void update();
	//////////////////////////////////////////////////////////////////////////
	// /Draws the particle to the screen
	//////////////////////////////////////////////////////////////////////////
	void drawSelf();
	//////////////////////////////////////////////////////////////////////////
	// /Sets the particle speed
	//////////////////////////////////////////////////////////////////////////
	void setSpeed(const sf::Vector2f& speedVector);
	//////////////////////////////////////////////////////////////////////////
	// /Adjusts the particle speed
	//////////////////////////////////////////////////////////////////////////
	void adjustSpeed(const sf::Vector2f& adjustVector);
	//////////////////////////////////////////////////////////////////////////
	// /The Legendary Am I Dead Check
	//////////////////////////////////////////////////////////////////////////
	bool getDead();
private:
	int mLife;
	sf::Vector2f mPosition, mSpeed;
	std::shared_ptr<sf::Texture> mTexture;
	sf::Sprite mSprite;
};

#endif
/*

Particle man
Particle man
doing the things
a particle can

*/