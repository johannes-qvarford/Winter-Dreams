#ifndef INCLUDED_LEVELSTATE
#define INCLUDED_LEVELSTATE

#include <memory>
#include <string>

#include "State.h"

class SubLevel;
class Player;
class Camera;

////////////////////////////////////////////////////////////
// /LevelState controls a collection of sublevels.
// /It owns a Player and a Camera, which exist in all sublevels.
// /Only one sublevel can be active(updated) at one time.
////////////////////////////////////////////////////////////
class LevelState : public State {
public:

	////////////////////////////////////////////////////////////
	// /Default constructor.
	////////////////////////////////////////////////////////////
	LevelState();

	////////////////////////////////////////////////////////////
	// /Destructor.
	////////////////////////////////////////////////////////////
	~LevelState();

	////////////////////////////////////////////////////////////
	// /Update the state.
	////////////////////////////////////////////////////////////
	virtual void update();

	////////////////////////////////////////////////////////////
	// /Render the current frame.
	////////////////////////////////////////////////////////////
	virtual void render();

	////////////////////////////////////////////////////////////
	// /Add a sublevel to the level.
	////////////////////////////////////////////////////////////
	void addSubLevel(const std::string& name, std::shared_ptr<SubLevel> sublevel_sp);

	////////////////////////////////////////////////////////////
	// /Switch to a sublevel with a certain name.
	////////////////////////////////////////////////////////////
	void switchSubLevel(const std::string& name);

	////////////////////////////////////////////////////////////
	// /Get a sublevel with a certain name.
	////////////////////////////////////////////////////////////
	std::shared_ptr<SubLevel> getSubLevel(const std::string& name);

	////////////////////////////////////////////////////////////
	// /Set the level's player.
	////////////////////////////////////////////////////////////
	void setPlayer(std::shared_ptr<Player> player_sp);

	////////////////////////////////////////////////////////////
	// /Set the level's camera.
	////////////////////////////////////////////////////////////
	void setCamera(std::shared_ptr<Camera> camera_sp);

	////////////////////////////////////////////////////////////
	// /Get the level's player.
	////////////////////////////////////////////////////////////
	std::shared_ptr<Player> getPlayer();

	////////////////////////////////////////////////////////////
	// /Get the level's camera.
	////////////////////////////////////////////////////////////
	std::shared_ptr<Camera> getCamera();

private:

	typedef std::map<std::string, std::shared_ptr<SubLevel> > SubLevels;

	SubLevels mSubLevels;

	SubLevels::iterator mCurrentSubLevel;

	std::shared_ptr<Player> mPlayer_sp;

	std::shared_ptr<Camera> mCamera_sp;

	////////////////////////////////////////////////////////////
	// /No copy.
	////////////////////////////////////////////////////////////
	LevelState(const LevelState&);

	////////////////////////////////////////////////////////////
	// /No copy.
	////////////////////////////////////////////////////////////
	LevelState& operator=(const LevelState&);
};


#endif