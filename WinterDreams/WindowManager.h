#ifndef INCLUDED_WINDOWMANAGER
#define INCLUDED_WINDOWMANAGER

namespace sf {
	class RenderWindow;
	class RenderStates;
	class RenderTexture;
};

////////////////////////////////////////////////////////////
// /WindowManager is a singleton of the only window in the game.
////////////////////////////////////////////////////////////
class WindowManager {
public:

	////////////////////////////////////////////////////////////
	// /Get the singleton.
	////////////////////////////////////////////////////////////
	static WindowManager& get();

	////////////////////////////////////////////////////////////
	// /Get the texture for drawing.
	////////////////////////////////////////////////////////////
	sf::RenderTexture* getWindow();

	////////////////////////////////////////////////////////////
	// /Get the window for drawing.
	////////////////////////////////////////////////////////////
	sf::RenderWindow* getRenderWindow();

	////////////////////////////////////////////////////////////
	// /Get the RenderStates for drawing.
	////////////////////////////////////////////////////////////
	sf::RenderStates* getStates();

	////////////////////////////////////////////////////////////
	// /Resize the texture
	////////////////////////////////////////////////////////////
	void resizeTexture(unsigned int x, unsigned int y);

	////////////////////////////////////////////////////////////
	// /Resets the counter for light IDs
	////////////////////////////////////////////////////////////
	void resetLightIDs();

	////////////////////////////////////////////////////////////
	// /Returns the lowest avalible light ID. Every time this 
	// /function is called, the returned ID is concidered used
	// /and will not be availbile again untill resetLightIDs is
	// /called.
	////////////////////////////////////////////////////////////
	unsigned int getNextLightID();

private:

	WindowManager();
	
	WindowManager(const WindowManager&);//no copy
	
	WindowManager& operator=(const WindowManager&);//no copy

	int mNextLightID;

	sf::RenderTexture* mTexture_p;
	sf::RenderWindow* mWindow_p;
	sf::RenderStates* mRenderStates_p;
};

#endif